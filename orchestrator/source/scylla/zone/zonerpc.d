module scylla.zone.zonerpc;


// Generated by the gRPC dlang plugin.


import scylla.zone.zone;
import std.array;
import grpc;
import google.protobuf;
import hunt.logging;
import core.thread;




class ZoneHandlerClient
{
	this(Channel channel)
	{
		_channel = channel;
	}

	ClientReader!Zone ListZones(Empty request ){
		mixin(CM1!(Zone , ZoneHandlerBase.SERVICE));
	}
	ResourceIdentifier ListResources( ZoneIdentifier request)
	{
		mixin(CM!(ResourceIdentifier , ZoneHandlerBase.SERVICE));
	}

	void ListResources( ZoneIdentifier request , void delegate(Status status , ResourceIdentifier response) dele)
	{
		mixin(CMA!(ResourceIdentifier , ZoneHandlerBase.SERVICE));
	}


	private:
	Channel _channel;
}

class ZoneHandlerBase: GrpcService
{
	enum SERVICE  = "scylla.zone.ZoneHandler";
	string getModule()
	{
		return SERVICE;
	}

	Status ListZones(Empty , ServerWriter!Zone){ return Status.OK; }
	Status ListResources(ZoneIdentifier , ref ResourceIdentifier){ return Status.OK; }

	Status process(string method , GrpcStream stream)
	{
		switch(method)
		{
			mixin(SM1!(Empty , Zone , "ListZones"));
			mixin(SM!(ZoneIdentifier , ResourceIdentifier , "ListResources"));
			mixin(NONE());
		}
	}
}


