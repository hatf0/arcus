module scylla.instance.instancerpc;


// Generated by the gRPC dlang plugin.


import scylla.instance.instance;
import std.array;
import grpc;
import google.protobuf;
import hunt.logging;
import core.thread;


import scylla.drive.drive;
import scylla.zone.zone;


class InstanceHandlerClient
{
	this(Channel channel)
	{
		_channel = channel;
	}

	ClientReader!ResourceIdentifier ListInstances(ZoneIdentifier request ){
		mixin(CM1!(ResourceIdentifier , InstanceHandlerBase.SERVICE));
	}
	InstanceStatus GetInstance( ResourceIdentifier request)
	{
		mixin(CM!(InstanceStatus , InstanceHandlerBase.SERVICE));
	}

	void GetInstance( ResourceIdentifier request , void delegate(Status status , InstanceStatus response) dele)
	{
		mixin(CMA!(InstanceStatus , InstanceHandlerBase.SERVICE));
	}

	InstanceReply DeleteInstance( ResourceIdentifier request)
	{
		mixin(CM!(InstanceReply , InstanceHandlerBase.SERVICE));
	}

	void DeleteInstance( ResourceIdentifier request , void delegate(Status status , InstanceReply response) dele)
	{
		mixin(CMA!(InstanceReply , InstanceHandlerBase.SERVICE));
	}

	ClientReaderWriter!(ResourceIdentifier ,ProvisioningInfo) DeployInstance(){
		mixin(CM3!(ResourceIdentifier , ProvisioningInfo  , InstanceHandlerBase.SERVICE));
	}
	InstanceReply UpdateInstance( InstanceUpdateAction request)
	{
		mixin(CM!(InstanceReply , InstanceHandlerBase.SERVICE));
	}

	void UpdateInstance( InstanceUpdateAction request , void delegate(Status status , InstanceReply response) dele)
	{
		mixin(CMA!(InstanceReply , InstanceHandlerBase.SERVICE));
	}

	InstanceReply ActionInstance( InstanceAction request)
	{
		mixin(CM!(InstanceReply , InstanceHandlerBase.SERVICE));
	}

	void ActionInstance( InstanceAction request , void delegate(Status status , InstanceReply response) dele)
	{
		mixin(CMA!(InstanceReply , InstanceHandlerBase.SERVICE));
	}


	private:
	Channel _channel;
}

class InstanceHandlerBase: GrpcService
{
	enum SERVICE  = "scylla.instance.InstanceHandler";
	string getModule()
	{
		return SERVICE;
	}

	Status ListInstances(ZoneIdentifier , ServerWriter!ResourceIdentifier){ return Status.OK; }
	Status GetInstance(ResourceIdentifier , ref InstanceStatus){ return Status.OK; }
	Status DeleteInstance(ResourceIdentifier , ref InstanceReply){ return Status.OK; }
	Status DeployInstance(ServerReaderWriter!(ProvisioningInfo , ResourceIdentifier)){ return Status.OK; }
	Status UpdateInstance(InstanceUpdateAction , ref InstanceReply){ return Status.OK; }
	Status ActionInstance(InstanceAction , ref InstanceReply){ return Status.OK; }

	Status process(string method , GrpcStream stream)
	{
		switch(method)
		{
			mixin(SM1!(ZoneIdentifier , ResourceIdentifier , "ListInstances"));
			mixin(SM!(ResourceIdentifier , InstanceStatus , "GetInstance"));
			mixin(SM!(ResourceIdentifier , InstanceReply , "DeleteInstance"));
			mixin(SM3!(ProvisioningInfo , ResourceIdentifier , "DeployInstance"));
			mixin(SM!(InstanceUpdateAction , InstanceReply , "UpdateInstance"));
			mixin(SM!(InstanceAction , InstanceReply , "ActionInstance"));
			mixin(NONE());
		}
	}
}


