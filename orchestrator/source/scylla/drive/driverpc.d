module scylla.drive.driverpc;


// Generated by the gRPC dlang plugin.


import scylla.drive.drive;
import std.array;
import grpc;
import google.protobuf;
import hunt.logging;
import core.thread;


import scylla.zone.zone;


class DriveHandlerClient
{
	this(Channel channel)
	{
		_channel = channel;
	}

	ClientReader!ResourceIdentifier ListDrives(ZoneIdentifier request ){
		mixin(CM1!(ResourceIdentifier , DriveHandlerBase.SERVICE));
	}
	Drive GetDrive( ResourceIdentifier request)
	{
		mixin(CM!(Drive , DriveHandlerBase.SERVICE));
	}

	void GetDrive( ResourceIdentifier request , void delegate(Status status , Drive response) dele)
	{
		mixin(CMA!(Drive , DriveHandlerBase.SERVICE));
	}

	DriveReply DeleteDrive( ResourceIdentifier request)
	{
		mixin(CM!(DriveReply , DriveHandlerBase.SERVICE));
	}

	void DeleteDrive( ResourceIdentifier request , void delegate(Status status , DriveReply response) dele)
	{
		mixin(CMA!(DriveReply , DriveHandlerBase.SERVICE));
	}

	ClientReaderWriter!(ResourceIdentifier ,Drive) DeployDrive(){
		mixin(CM3!(ResourceIdentifier , Drive  , DriveHandlerBase.SERVICE));
	}
	DriveReply UpdateDrive( DriveUpdateAction request)
	{
		mixin(CM!(DriveReply , DriveHandlerBase.SERVICE));
	}

	void UpdateDrive( DriveUpdateAction request , void delegate(Status status , DriveReply response) dele)
	{
		mixin(CMA!(DriveReply , DriveHandlerBase.SERVICE));
	}

	DriveReply ActionDrive( DriveAction request)
	{
		mixin(CM!(DriveReply , DriveHandlerBase.SERVICE));
	}

	void ActionDrive( DriveAction request , void delegate(Status status , DriveReply response) dele)
	{
		mixin(CMA!(DriveReply , DriveHandlerBase.SERVICE));
	}


	private:
	Channel _channel;
}

class DriveHandlerBase: GrpcService
{
	enum SERVICE  = "scylla.drive.DriveHandler";
	string getModule()
	{
		return SERVICE;
	}

	Status ListDrives(ZoneIdentifier , ServerWriter!ResourceIdentifier){ return Status.OK; }
	Status GetDrive(ResourceIdentifier , ref Drive){ return Status.OK; }
	Status DeleteDrive(ResourceIdentifier , ref DriveReply){ return Status.OK; }
	Status DeployDrive(ServerReaderWriter!(Drive , ResourceIdentifier)){ return Status.OK; }
	Status UpdateDrive(DriveUpdateAction , ref DriveReply){ return Status.OK; }
	Status ActionDrive(DriveAction , ref DriveReply){ return Status.OK; }

	Status process(string method , GrpcStream stream)
	{
		switch(method)
		{
			mixin(SM1!(ZoneIdentifier , ResourceIdentifier , "ListDrives"));
			mixin(SM!(ResourceIdentifier , Drive , "GetDrive"));
			mixin(SM!(ResourceIdentifier , DriveReply , "DeleteDrive"));
			mixin(SM3!(Drive , ResourceIdentifier , "DeployDrive"));
			mixin(SM!(DriveUpdateAction , DriveReply , "UpdateDrive"));
			mixin(SM!(DriveAction , DriveReply , "ActionDrive"));
			mixin(NONE());
		}
	}
}


