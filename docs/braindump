zones hold nodes
nodes hold instances

zones have one main "zone controller", where redis is replicated to

      (Redis)
[Master] -> [Zone us-west-1] -> Node 0-100
	    [Zone us-east-1] -> Node 0-100
	    [Zone us-south-1] -> Node 0-100
	    [Zone us-central-1] -> Node 0-100 


on api request for new node
    (HTTPS)      (randomly chosen based on load)
(User) -> [Load Balancer] -> [API]  
			     [API]
			     [API]
			     [API]
    (gRPC)
[API] -> [Zone (specified)]

	   (Redis pubsub ??)
[Zone (specified)] -> Node broadcast with provisioning information


ALL RESOURCES:
	std.concurrency provides a method for us to spawn these processes and have them "attached" to a global thread manager
	
	this allows us to leave the resources unmodified- avoiding data races (for the most part, TOCTOU might be an issue)

	we use a messaging system to avoid this entirely- events which MUST be executed in order can be done through prioritySend

	as well- we must ensure that resources NEVER destroy their thread loop. it should NEVER occur.


IMPORTANT:
	ResourceStorage IS THE ONLY PERSISTENT FORM OF STORAGE!

DISK:
	ext4-based


TODO: how to optimize the ResourceStorage? avoid storing 4GB+ files in memory.. because that isn't cute





